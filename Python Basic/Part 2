"""
#1.
import ClearScreen
def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;
print(test_distinct([1,5,7,9]))
print(test_distinct([2,4,5,5,7,9]))

#2.
import ClearScreen
import random
char_list = ['a','e','i','o','u']
random.shuffle(char_list)
print(''.join(char_list))

#3.
import ClearScreen
def remove_nums(int_list):
  #list starts with 0 index
  position = 3 - 1 
  idx = 0
  len_list = (len(int_list))
  while len_list>0:
    idx = (position+idx)%len_list
    print(int_list.pop(idx))
    len_list -= 1
nums = [10,20,30,40,50,60,70,80,90]
remove_nums(nums)

#4.
import ClearScreen
def three_sum(nums):
  result = []
  nums.sort()
  for i in range(len(nums)-2):
    if i> 0 and nums[i] == nums[i-1]:
      continue
    l, r = i+1, len(nums)-1
    while l < r:
      s = nums[i] + nums[l] + nums[r]
      if s > 0:
        r -= 1
      elif s < 0:
          l += 1
      else:
        # found three sum
        result.append((nums[i], nums[l], nums[r]))
        # remove duplicates
        while l < r and nums[l] == nums[l+1]:
          l+=1
          while l < r and nums[r] == nums[r-1]:
            r -= 1
            l += 1
            r -= 1
          return result

x = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]
print(three_sum(x))

#5.
import ClearScreen
numbers = []
for num in range(1000):
  num=str(num).zfill(3)
print(num)
numbers.append(num)

#6.
import ClearScreen
string_words = '''United States Declaration of Independence
From Wikipedia, the free encyclopedia
The United States Declaration of Independence is the statement
adopted by the Second Continental Congress meeting at the Pennsylvania State
House (Independence Hall) in Philadelphia on July 4, 1776, which announced
that the thirteen American colonies, then at war with the Kingdom of Great
Britain, regarded themselves as thirteen independent sovereign states, no longer
under British rule. These states would found a new nation â€“ the United States of
America. John Adams was a leader in pushing for independence, which was passed
on July 2 with no opposing vote cast. A committee of five had already drafted the
formal declaration, to be ready when Congress voted on independence.

John Adams persuaded the committee to select Thomas Jefferson to compose the original
draft of the document, which Congress would edit to produce the final version.
The Declaration was ultimately a formal explanation of why Congress had voted on July
2 to declare independence from Great Britain, more than a year after the outbreak of
the American Revolutionary War. The next day, Adams wrote to his wife Abigail: "The
Second Day of July 1776, will be the most memorable Epocha, in the History of America."
But Independence Day is actually celebrated on July 4, the date that the Declaration of
Independence was approved.

After ratifying the text on July 4, Congress issued the Declaration of Independence in
several forms. It was initially published as the printed Dunlap broadside that was widely
distributed and read to the public. The source copy used for this printing has been lost,
and may have been a copy in Thomas Jefferson's hand.[5] Jefferson's original draft, complete
with changes made by John Adams and Benjamin Franklin, and Jefferson's notes of changes made
by Congress, are preserved at the Library of Congress. The best-known version of the Declaration
is a signed copy that is displayed at the National Archives in Washington, D.C., and which is
popularly regarded as the official document. This engrossed copy was ordered by Congress on
July 19 and signed primarily on August 2.

The sources and interpretation of the Declaration have been the subject of much scholarly inquiry.
The Declaration justified the independence of the United States by listing colonial grievances against
King George III, and by asserting certain natural and legal rights, including a right of revolution.
Having served its original purpose in announcing independence, references to the text of the
Declaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric
(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement
on human rights, particularly its second sentence:

We hold these truths to be self-evident, that all men are created equal, that they are endowed by their
Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.

This has been called "one of the best-known sentences in the English language", containing "the most potent
and consequential words in American history". The passage came to represent a moral standard to which
the United States should strive. This view was notably promoted by Abraham Lincoln, who considered the
Declaration to be the foundation of his political philosophy and argued that it is a statement of principles
through which the United States Constitution should be interpreted.

The U.S. Declaration of Independence inspired many other similar documents in other countries, the first
being the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands
(modern-day Belgium). It also served as the primary model for numerous declarations of independence across
Europe and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the
19th century.'''

word_list = string_words.split()

word_freq = [word_list.count(n) for n in word_list]

print("String:\n {} \n".format(string_words))
print("List:\n {} \n".format(str(word_list)))
print("Pairs (Words and Frequencies:\n {}".format(str(list(zip(word_list, word_freq)))))


#7.
import ClearScreen
import collections
import pprint
file_input = input('File Name: ')
with open(file_input, 'r') as info:
  count = collections.Counter(info.read().upper())
  value = pprint.pformat(count)
print(value)

#8.
import bs4
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen

news_url="https://news.google.com/news/rss"
Client=urlopen(news_url)
xml_page=Client.read()
Client.close()

soup_page=soup(xml_page,"xml")
news_list=soup_page.findAll("item")
# Print news title, url and publish date
for news in news_list:
  print(news.title.text)
  print(news.link.text)
  print(news.pubDate.text)
  print("-"*60)

#9.
import ClearScreen
import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted(["%s==%s" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)

#10.
import ClearScreen
import platform as pl

os_profile = [
        'architecture',
        'linux_distribution',
        'mac_ver',
        'machine',
        'node',
        'platform',
        'processor',
        'python_build',
        'python_compiler',
        'python_version',
        'release',
        'system',
        'uname',
        'version',
    ]
for key in os_profile:
  if hasattr(pl, key):
    print(key +  ": " + str(getattr(pl, key)()))

#11.
import ClearScreen
import itertools
from functools import partial
X = [10, 20, 20, 20]
Y = [10, 20, 30, 40]
Z = [10, 30, 40, 20]
T = 70

def check_sum_array(N, *nums):
  if sum(x for x in nums) == N:
    return (True, nums)
  else:
      return (False, nums)
pro = itertools.product(X,Y,Z)
func = partial(check_sum_array, T)
sums = list(itertools.starmap(func, pro))

result = set()
for s in sums:
    if s[0] == True and s[1] not in result:
      result.add(s[1])
      print(result)

#12.
import ClearScreen
def permute(nums):
  result_perms = [[]]
  for n in nums:
    new_perms = []
    for perm in result_perms:
      for i in range(len(perm)+1):
        new_perms.append(perm[:i] + [n] + perm[i:])
        result_perms = new_perms
  return result_perms

my_nums = [1,2,3]
print("Original Cofllection: ",my_nums)
print("Collection of distinct numbers:\n",permute(my_nums))

#13.
import ClearScreen
def letter_combinations(digits):
    if digits == "":
        return []
    string_maps = {
        "1": "abc",
        "2": "def",
        "3": "ghi",
        "4": "jkl",
        "5": "mno",
        "6": "pqrs",
        "7": "tuv",
        "8": "wxy",
        "9": "z"
    }
    result = [""]
    for num in digits:
        temp = []
        for an in result:
            for char in string_maps[num]:
                temp.append(an + char)
        result = temp
    return result

digit_string = "47"
print(letter_combinations(digit_string))
digit_string = "29"
print(letter_combinations(digit_string))

#14.
import ClearScreen
def add_without_plus_operator(a, b):
    while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
    return a
print(add_without_plus_operator(2, 10))
print(add_without_plus_operator(-20, 10))
print(add_without_plus_operator(-10, -20))

#15.
import ClearScreen
from collections import deque
import re

__operators__ = "+-/*"
__parenthesis__ = "()"
__priority__ = {
    '+': 0,
    '-': 0,
    '*': 1,
    '/': 1,
}

#16.
import ClearScreen
def pythagoras(opposite_side,adjacent_side,hypotenuse):
        if opposite_side == str("x"):
            return ("Opposite = " + str(((hypotenuse**2) - (adjacent_side**2))**0.5))
        elif adjacent_side == str("x"):
            return ("Adjacent = " + str(((hypotenuse**2) - (opposite_side**2))**0.5))
        elif hypotenuse == str("x"):
            return ("Hypotenuse = " + str(((opposite_side**2) + (adjacent_side**2))**0.5))
        else:
            return "You know the answer!"
    
print(pythagoras(3,4,'x'))
print(pythagoras(3,'x',5))
print(pythagoras('x',4,5))
print(pythagoras(3,4,5))

#17.
import ClearScreen
def gen_strobogrammatic(n):
    
 #   :type n: int
  #  :rtype: List[str]
    
    result = helper(n, n)
    return result


def helper(n, length):
    if n == 0:
        return [""]
    if n == 1:
        return ["1", "0", "8"]
    middles = helper(n-2, length)
    result = []
    for middle in middles:
        if n != length:
            result.append("0" + middle + "0")
        result.append("8" + middle + "8")
        result.append("1" + middle + "1")
        result.append("9" + middle + "6")
        result.append("6" + middle + "9")
    return result

print("n = 2: \n",gen_strobogrammatic(2))
print("n = 3: \n",gen_strobogrammatic(3))

#18.
import ClearScreen
x = input("Input the first number ")
y = input("Input the second number ")
z = input("Input the third number ")
print("Median of the above three numbers -")

if y < x and x < z:
    print(x)
elif z < x and x < y:
    print(x)
elif z < y and y < x:
    print(y)
elif x < y and y < z:
    print(y)   
elif y < z and z < x:
    print(z)    
elif x < z and z < y:
    print(z)

#19.
import ClearScreen
def ndegrees(num):
  ans = True
  n, tempn, i = 2, 2, 2
  while ans:
    if str(tempn) in num:
      i += 1
      tempn = pow(n, i)
    else:
      ans = False
  return i-1;
print(ndegrees("2481632"))
print(ndegrees("248163264"))

#20.
import ClearScreen
def factendzero(n):
  x = n // 5
  y = x 
  while x > 0:
    x /= 5
    y += int(x)
  return y
       
print(factendzero(5))
print(factendzero(12))
print(factendzero(100))

#21.
import ClearScreen
def no_notes(a):
  Q = [500, 200, 100, 50, 20, 10]
  x = 0
  for i in range(6):
    q = Q[i]
    x += int(a / q)
    a = int(a % q)
  if a > 0:
    x = -1
  return x
print(no_notes(880))
print(no_notes(1000))

#22.
import ClearScreen
def new_seq(n):
    if n==1 or n==2 or n==3 or n==4:
        return 1
    return new_seq(n-1) + new_seq(n-2) + new_seq(n-3) + new_seq(n-4)
print(new_seq(5))
print(new_seq(6))
print(new_seq(7))

#23.
import ClearScreen
def repeat_times(n):
  n_str = str(n)
  while (n > 0):
    n -= sum([int(i) for i in list(n_str)])
    n_str = list(str(n))
  return n
print(repeat_times(9))
print(repeat_times(20))
print(repeat_times(110))
print(repeat_times(5674))

#24.
import ClearScreen
def divisor(n):
  x = len([i for i in range(1,n+1) if not n % i])
  return x
print(divisor(15))
print(divisor(12))
print(divisor(9))
print(divisor(6))
print(divisor(3))

#25.
import ClearScreen
def absent_digits(n):
  all_nums = set([0,1,2,3,4,5,6,7,8,9])
  n = set([int(i) for i in n])
  n = n.symmetric_difference(all_nums)
  n = sorted(n)
  return n
print(absent_digits([9,8,3,2,2,0,9,7,6,3]))

#26.
import ClearScreen
def sum_distinct_pairs(arr):
    result = 0
    i = 0
    while i<len(arr):
        result+=i*arr[i]-(len(arr)-i-1)*arr[i]
        i+=1
    return result
print(sum_distinct_pairs([1,2,3]))
print(sum_distinct_pairs([1,4,5]))

#27.
import ClearScreen
def ap_gp_sequence(arr):
  if arr[0]==arr[1]==arr[2]==0:
    return "Wrong Numbers"
  else:
    if arr[1]-arr[0]==arr[2]-arr[1]:
      n=2*arr[2]-arr[1]
      return "AP sequence, "+'Next number of the sequence: '+str(n)
    else:
      n=arr[2]**2/arr[1]
      return "GP sequence, " + 'Next number of the sequence:  '+str(n)

print(ap_gp_sequence([1,2,3]))
print(ap_gp_sequence([2,6,18]))
print(ap_gp_sequence([0,0,0]))


#28.
import ClearScreen
tn = int(input("Input third term of the series:"))
tltn = int(input("Input 3rd last term:"))
s_sum = int(input("Sum of the series:"))
n = int(2*s_sum/(tn+tltn))
print("Length of the series: ",n)


if n-5==0:
  d = (s_sum-3*tn)//6
else:
  d = (tltn-tn)/(n-5)

a = tn-2*d
j = 0
print("Series:")
for j in range(n-1):
  print(int(a),end=" ")
  a+=d
print(int(a),end=" ")

#29.
import ClearScreen
def ngcd(x, y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x, y):
  n = ngcd(x, y)
  result = 0
  z = int(n**0.5)
  i = 1
  while( i <= z ):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result

print("Number of common divisors: ",num_comm_div(2, 4))
print("Number of common divisors: ",num_comm_div(2, 8))
print("Number of common divisors: ",num_comm_div(12, 24))

#30.
import ClearScreen
def rev_number(n):
  s = 0
  while True:
    k = str(n)
    if k == k[::-1]:
      break
    else:
      m = int(k[::-1])
      n += m
      s += 1
  return n 

print(rev_number(1234))
print(rev_number(1473))

#31.
import ClearScreen
def carry_number(x, y):
  ctr = 0
  if(x == 0 and y == 0):
    return 0
  z = 0  
  for i in reversed(range(10)):
      z = x%10 + y%10 + z
      if z > 9:
        z = 1
      else:
        z = 0
      ctr += z
      x //= 10
      y //= 10
      
  if ctr == 0:
    return "No carry operation."
  elif ctr == 1:
    return ctr
  else:
    return ctr
print(carry_number(786, 457))
print(carry_number(5, 6))

#32.
import ClearScreen
print("Input the heights of eight buildings:")
l = [int(input()) for i in range(8)]
print("Heights of the top three buildings:")
l = sorted(l)
print(*l[:4:-1], sep='\n')

#33.
import ClearScreen
print("Input two integers(a b): ")
a,b = map(int,input().split(" "))
print("Number of digit of a and b.:")
print(len(str(a+b)))

#34.
import ClearScreen
print("Input three integers(sides of a triangle)")
int_num = list(map(int,input().split()))
x,y,z = sorted(int_num)
if x**2+y**2==z**2:
    print('Yes')
else:
    print('No')

#35.
import ClearScreen
print("Input the value of a, b, c, d, e, f:")
a, b, c, d, e, f = map(float, input().split())
n = a*e - b*d
print("Values of x and y:")
if n != 0:
    x = (c*e - b*f) / n
    y = (a*f - c*d) / n
    print('{:.3f} {:.3f}'.format(x+0, y+0))

#36.
import ClearScreen
def round_n(n):
    if n%1000:
        return (1+n//1000)*1000
    else:
        return n
     
def compute_debt(n):
    if n==0: return 100000
    return int(round_n(compute_debt(n-1)*1.05))

print("Input number of months:")
result = compute_debt(int(input()))
print("Amount of debt: ","$"+str(result).strip())

#37.
import ClearScreen
import itertools
print("Input the number(n):")
n=int(input())
result=0
for (i,j,k) in itertools.product(range(10),range(10),range(10)):
    result+=(0<=n-(i+j+k)<=9)
print("Number of combinations:",result)

#38.
import ClearScreen
primes = [1] * 500000
primes[0] = 0
 
for i in range(3, 1000, 2):
    if primes[i // 2]:
        primes[(i * i) // 2::i] = [0] * len(primes[(i * i) // 2::i])
 
print("Input the number(n):")
n=int(input())
if n < 4:
    print("Number of prime numbers which are less than or equal to n.:",n - 1)
else:
    print("Number of prime numbers which are less than or equal to n.:",sum(primes[:(n + 1) // 2]) + 1)

#39.
import ClearScreen
print("Input three coordinate of the circle:")
x1, y1, x2, y2, x3, y3 = map(float, input().split())
c = (x1-x2)**2 + (y1-y2)**2
a = (x2-x3)**2 + (y2-y3)**2
b = (x3-x1)**2 + (y3-y1)**2
s = 2*(a*b + b*c + c*a) - (a*a + b*b + c*c) 
px = (a*(b+c-a)*x1 + b*(c+a-b)*x2 + c*(a+b-c)*x3) / s
py = (a*(b+c-a)*y1 + b*(c+a-b)*y2 + c*(a+b-c)*y3) / s 
ar = a**0.5
br = b**0.5
cr = c**0.5 
r = ar*br*cr / ((ar+br+cr)*(-ar+br+cr)*(ar-br+cr)*(ar+br-cr))**0.5
print("Radius of the said circle:")
print("{:>.3f}".format(r))
print("Central coordinate (x, y) of the circle:")
print("{:>.3f}".format(px),"{:>.3f}".format(py))

#40.
import ClearScreen
print("Input x1,y1,x2,y2,x3,y3,xp,yp:")
x1,y1,x2,y2,x3,y3,xp,yp = map(float, input().split())
c1 = (x2-x1)*(yp-y1)-(y2-y1)*(xp-x1)
c2 = (x3-x2)*(yp-y2)-(y3-y2)*(xp-x2)
c3 = (x1-x3)*(yp-y3)-(y1-y3)*(xp-x3)
if (c1<0 and c2<0 and c3<0) or (c1>0 and c2>0 and c3>0):
    print("The point is in the triangle.")
else:
    print("The point is outside the triangle.")

#41.
import ClearScreen
print("Input first integer:")
x = int(input())
print("Input second integer:")
y = int(input())
if x >= 10 ** 80 or y >= 10 ** 80 or x + y >= 10 ** 80:
    print("Overflow!")
else:
    print("Sum of the two integers: ",x + y)

#42.
import ClearScreen
print("Input six integers:")
nums = list(map(int, input().split()))
nums.sort()
nums.reverse()
print("After sorting the said ntegers:")
print(*nums)

#43.
import ClearScreen
print("Input x1,y1,x2,y2,x3,y3,xp,yp:")
x1, y1,x2, y2, x3, y3, x4, y4 = map(float, input().split())
print('PQ and RS are parallel.' if abs((x2 - x1)*(y4 - y3) - (x4 - x3)*(y2 - y1)) < 1e-10 else 'PQ and RS are not parallel')

#44.
import ClearScreen
while True:
    print("Input number of sequence of numbers you want to input (0 to exit):")
    n = int(input())
    if n == 0:
        break
    else:
        A = []
        Sum = []
        print("Input numbers:") 
        for i in range(n):
            A.append(int(input()))
        Wa = 0
        for i in range(0,n):
            Wa += A[i]
            Sum.append(Wa)
        for i in range(0 , n):
            for j in range(0 , i):
                Num = Sum[i] - Sum[j]
                Sum.append(Num)
        print("Maximum sum of the said contiguous subsequence:")
        print(max(Sum))

#45.
import ClearScreen
import math
print("Input x1, y1, r1, x2, y2, r2:")
x1,y1,r1,x2,y2,r2 = [float(i) for i in input().split()]
d = math.sqrt((x1-x2)**2 + (y1-y2)**2)
if d <= r1-r2:
    print("C2  is in C1")
elif d <= r2-r1:
    print("C1  is in C2")
elif d < r1+r2:
    print("Circumference of C1  and C2  intersect")
elif d == r1+r2:
    print("Circumference of C1 and C2 will touch")
else:
    print("C1 and C2  do not overlap")

#46.
import ClearScreen
from datetime import date
print("Input month and date (separated by a single space):")
m, d = map(int, input().split())
weeks = {1:'Monday',2:'Tuesday',3:'Wednesday',4:'Thursday',5:'Friday',6:'Saturday',7:'Sunday'}
w = date.isoweekday(date(1982, m, d))
print("Name of the date: ",weeks[w])

#47.
import ClearScreen
import collections
print("Input a text in a line.")
text_list = list(map(str, input().split()))
sc = collections.Counter(text_list)
common_word = sc.most_common()[0][0]
max_char = ""
for s in text_list:
    if len(max_char) < len(s):
        max_char = s
print("\nMost frequent text and the word which has the maximum number of letters.")
print(common_word, max_char)

 #48.
import ClearScreen
import itertools
print("Input number of combinations and sum, input 0 0 to exit:")
while True:
  x, y = map(int, input(). split())
  if x == 0 and y == 0:
    break
  s = list(itertools.combinations(range(10), x))
  ctr = 0
  for i in s:
    if sum(i) == y:
            ctr += 1
print(ctr)

#49.
import ClearScreen
print("Input two adjoined sides and the diagonal of a parallelogram (comma separated):")
a,b,c = map(int, input().split(","))
if c**2 == a**2+b**2 :
    print("This is a rectangle.")
if a == b:
    print("This is a rhombus.")

#50.
import ClearScreen
print("Input a text with two words 'Python' and 'Java'")
text = input().split()
for i in range(len(text)):
    if "Python" in text[i]:n = text[i].index("Python");text[i] = text[i][:n] + "Java" + text[i][n + 6:]
    elif "Java" in text[i]:n = text[i].index("Java");text[i] = text[i][:n] + "Python" + text[i][n + 4:]
print(*text)

#51.
import ClearScreen
print("Input an integer created by 8 numbers from 0 to 9.:")
num = list(input())
print("Difference between the largest and the smallest integer from the given integer:")
print(int("".join(sorted(num,reverse=True))) - int("".join(sorted(num))))

#52.
import ClearScreen
MAX = 105000
print("Input a number (nâ‰¤10000) to compute the sum:(0 to exit)") 
is_prime = [True for _ in range(MAX)]
is_prime[0] = is_prime[1] = False
for i in range(2, int(MAX ** (1 / 2)) + 1):
  if is_prime[i]:
    for j in range(i ** 2, MAX, i):
      is_prime[j] = False 
primes = [i for i in range(MAX) if is_prime[i]] 
while True:
  n = int(input())
  if not n:
    break
  print("Sum of first",n,"prime numbers:")
  print(sum(primes[:n]))

#53.
import ClearScreen
import sys
from bisect import bisect_right
from itertools import chain, compress
print("Input an even number (0 to exit):") 
ub = 50000
is_prime = [0, 0, 1, 1] + [0]*(ub-3)
is_prime[5::6] = is_prime[7::6] = [1]*int(ub/6)
primes = [2, 3]
append = primes.append
 
for n in chain(range(5, ub, 6), range(7, ub, 6)):
    if is_prime[n]:
        append(n)
        is_prime[n*3::n*2] = [0]*((ub-n)//(n*2))
primes.sort()

for n in map(int, sys.stdin):
    if not n:
        break
    if n%2:
        print("Number of combinations:")  
        print(is_prime[n-2])
    else:
        print("Number of combinations:")  
        print(len([1 for p in primes[:bisect_right(primes, n/2)] if is_prime[n-p]]))


#54.
import ClearScreen
while True:
    print("Input number of straight lines (o to exit): ")
    n=int(input())
    if n<=0:
        break
    print("Number of regions:") 
    print((n*n+n+2)//2)


#55.
import ClearScreen
while True:
    try:
        print("Input xp, yp, xq, yq, xr, yr, xs, ys:")
        x_p, y_p, x_q, y_q, x_r, y_r, x_s, y_s = map(float, input().split())
        pq_x, pq_y = x_q - x_p, y_q - y_p
        rs_x, rs_y = x_s - x_r, y_s - y_r
        rs = pq_x*rs_x + pq_y*rs_y
        if abs(rs) > 1e-10:
            print("AB and CD are not orthogonal!")
        else:
            print("AB and CD are orthogonal!")
    except:
        break


#56.
import ClearScreen
import sys,re
def test(stri):
  print("Input some text and numeric values (<ctrl-d> to exit):")
  print("Sum of the numeric values: ",sum([sum(map(int,re.findall(r"[0-9]{1,5}",stri)))]))

print(test("sd1fdsfs23 dssd56"))
print(test("15apple2banana"))
print(test("flowers5fruit5"))

#57.
import ClearScreen
c=0
def f(x,y,z):
    if 0<=y<10 and 0<=z<10 and x[z][y]=='1':
        x[z][y]='0'
        for dy,dz in [[-1,0],[1,0],[0,-1],[0,1]]:f(x,y+dy,z+dz)
print("Input 10 rows of 10 numbers representing green squares (island) as 1 and blue squares (sea) as zeros") 
while 1:
    try:
        if c:input()
    except:break
    x = [list(input()) for _ in [0]*10]
    c=1;b=0
    for i in range(10):
        for j in range(10):
            if x[j][i]=='1':
                b+=1;f(x,i,j)
    print("Number of islands:")     
    print(b)

#58.
import ClearScreen
def restore_original_str(a1):
  result = ""
  ind = 0
  end = len(a1)
  while ind < end:
    if a1[ind] == "#":
      result += a1[ind + 2] * int(a1[ind + 1])
      ind += 3
    else:
      result += a1[ind]
      ind += 1
  return result
print("Original text:","XY#6Z1#4023")
print(restore_original_str("XY#6Z1#4023"))
print("Original text:","#39+1=1#30")
print(restore_original_str("#39+1=1#30"))

#59.
import ClearScreen
def poly_area(c):
  add = []
  for i in range(0, (len(c) - 2), 2):
    add.append(c[i] * c[i + 3] - c[i + 1] * c[i + 2])
    add.append(c[len(c) - 2] * c[1] - c[len(c) - 1] * c[0])
    return abs(sum(add) / 2)
no_sides = int(input('Input number of sides: '))
cord_data = []
for z in range(no_sides):
    print("Side:",z+1)
    print("Input the Coordinate:")
    x = int(input('Input Coordinate x:'))
    y = int(input('Input Coordinate y:'))
    cord_data.append(x)
    cord_data.append(y)
print("\nArea of the Polygon:",poly_area(cord_data))

#60.
import ClearScreen
print("Input a sentence (1024 characters. max.)")
yy = input()
yy = yy.replace(",", " ")
yy = yy.replace(".", " ")
print("3 to 6 characters length of words:")
print(*[y for y in yy.split() if 3 <= len(y) <= 6])

#61.

import ClearScreen
import sys
print("Input the numbers (ctrl+d to exit):")
nums = [list(map(int, l.split(","))) for l in sys.stdin]
mvv = nums[0]

for i in range(1, (len(nums)+1)//2):
    rvv = [0]*(i+1)
    for j in range(i):
        rvv[j] = max(rvv[j], mvv[j]+nums[i][j])
        rvv[j+1] = max(rvv[j+1], mvv[j]+nums[i][j+1])
    mvv = rvv

for i in range((len(nums)+1)//2, len(nums)):
    rvv = [0]*(len(mvv)-1)
    for j in range(len(rvv)):
        rvv[j] = max(mvv[j], mvv[j+1]) + nums[i][j]
    mvv = rvv
print("Maximum value of the sum of integers passing according to the rule on one line.") 
print(mvv[0])

#63.
import ClearScreen
from collections import Counter
print("Input a positive integer: (ctrl+d to exit)") 
pair_dict = Counter()
for i in range(2001):
  pair_dict[i] = min(i, 2000 - i) + 1 
 
while True:
  try:
    n = int(input())
    ans = 0
    for i in range(n + 1):
      ans += pair_dict[i] * pair_dict[n - i]
    print("Number of combinations of a,b,c,d:",ans) 
  except EOFError:
    break

#64.
import ClearScreen
def check_sum(nums, k):   
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == k:
                return True
    return False
print(check_sum([12, 5, 0, 5], 10))
print(check_sum([20, 20, 4, 5], 40))
print(check_sum([1, -1], 0))
print(check_sum([1, 1, 0], 0))

#65.
import ClearScreen
def longest_word_sequence(s, d):
	long_word = ""
	
	for word in d: 
		temp_word = ''	
		j = 0
		for letter in word: 

			for i in range(j, len(s)): 

				if letter == s[i]: 
					temp_word += letter 
					j = i                  
					break
				else:				
					continue        

		if (temp_word) == word and len(long_word) < len(temp_word):
			long_word = temp_word

		else:
			continue
	return long_word


print(longest_word_sequence("Green", {"Gn", "Gren", "ree", "en"}))

#66.
import ClearScreen
def happy_numbers(n):
    past = set()			
    while n != 1:
        n = sum(int(i)**2 for i in str(n))
        if n in past:
            return False
        past.add(n)
    return True
print([x for x in range(500) if happy_numbers(x)][:10])

#67.
import ClearScreen
def happy_numbers(n):
    past = set()			
    while n != 1:
        n = sum(int(i)**2 for i in str(n))
        if n in past:
            return False
        past.add(n)
    return True
print([x for x in range(500) if happy_numbers(x)][:10])

#68.
import ClearScreen
def count_Primes_nums(n):
    ctr = 0
    
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            ctr += 1

    return ctr

print(count_Primes_nums(10))
print(count_Primes_nums(100))

#69.
import ClearScreen
def isIsomorphic(str1, str2):          
    dict_str1 = {}
    dict_str2 = {}
    
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value, []) + [i]
            
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value, []) + [j]
    
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False

print(isIsomorphic("foo", "bar"));         
print(isIsomorphic("bar", "foo"));      
print(isIsomorphic("paper", "title"));   
print(isIsomorphic("title", "paper"));
print(isIsomorphic("apple", "orange"));
print(isIsomorphic("aa", "ab"));
print(isIsomorphic("ab", "aa"));

#70.
import ClearScreen
def longest_Common_Prefix(str1):
    
    if not str1:
        return ""

    short_str = min(str1,key=len)

    for i, char in enumerate(short_str):
        for other in str1:
            if other[i] != char:
                return short_str[:i]

    return short_str 

print(longest_Common_Prefix(["abcdefgh","abcefgh"]))
print(longest_Common_Prefix(["w3r","w3resource"]))
print(longest_Common_Prefix(["Python","PHP", "Perl"]))
print(longest_Common_Prefix(["Python","PHP", "Java"]))

#71.
import ClearScreen
def reverse_vowels(str1):
	vowels = ""
	for char in str1:
		if char in "aeiouAEIOU":
			vowels += char
	result_string = ""
	for char in str1:
		if char in "aeiouAEIOU":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string
print(reverse_vowels("w3resource"))
print(reverse_vowels("Python"))
print(reverse_vowels("Perl"))
print(reverse_vowels("USA"))

#72.
import ClearScreen
def is_Palindrome(n):
    return str(n) == str(n)[::-1]
print(is_Palindrome(100))
print(is_Palindrome(252))
print(is_Palindrome(-838)) 

#73.
import ClearScreen
def remove_duplicates(nums):
    for i in range (len(nums)-1, 0, -1):
        if nums[i] == nums[i-1]:
            del nums[i-1]
    return len(nums)

print(remove_duplicates([0,0,1,1,2,2,3,3,4,4,4]))
print(remove_duplicates([1, 2, 2, 3, 4, 4]))


#74.
import ClearScreen
def buy_and_sell(stock_price):
    max_profit_val, current_max_val = 0, 0 
    for price in reversed(stock_price):                       
        current_max_val = max(current_max_val, price)          
        potential_profit = current_max_val - price          
        max_profit_val = max(potential_profit, max_profit_val)

    return max_profit_val

print(buy_and_sell([8, 10, 7, 5, 7, 15]))
print(buy_and_sell([1, 2, 8, 1]))
print(buy_and_sell([]))

#75.
import ClearScreen
def remove_element(array_nums, val):
    i = 0
    while i < len(array_nums):
        if array_nums[i] == val:
            array_nums.remove(array_nums[i])

        else:
            i += 1

    return len(array_nums)
print(remove_element([1, 2, 3, 4, 5, 6, 7, 5], 5))
print(remove_element([10,10,10,10,10], 10)) 
print(remove_element([10,10,10,10,10], 20)) 
print(remove_element([], 1))

#76.
import ClearScreen
def search_Range(array_nums, target_val):
  result_arra = []
  start_pos = 0
  end_pos = 0
  for i in range(len(array_nums)):
      if target_val == array_nums[i] and start_pos == -1:
          start_pos = i
          end_pos = i
      elif target_val == array_nums[i] and start_pos != -1:
          end_pos = i
  result_arra.append(start_pos)
  result_arra.append(end_pos)
  return result_arra
print(search_Range([5, 7, 7, 8, 8, 8], 8))
print(search_Range([1, 3, 6, 9, 13, 14], 4))
print(search_Range([5, 7, 7, 8, 10], 8))

#77.
import ClearScreen
def max_profit(stock_price):
	max_profit_amt = 0

	for i in range(len(stock_price)):
		profit_amt = 0
		for j in range(i+1, len(stock_price)):
			profit_amt = stock_price[j] - stock_price[i]
			if  profit_amt > max_profit_amt:
				max_profit_amt = profit_amt
	return max_profit_amt
print(max_profit([224, 236, 247, 258, 259, 225]))

#78.
import ClearScreen
def print_matrix(nums):
    flag = True 
    
    for line in nums:

        if flag == True: 
            i = 0
            while i < len(line):
                print(line[i])
                i += 1
            flag = False

        else: 
            i = -1
            while i > -1 * len(line) - 1:
                print(line[i])
                i = i - 1
            flag = True
print_matrix([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [0, 6, 2, 8],
              [2, 3, 0, 2]])

#79.
import ClearScreen
def largest_product_of_three(nums):
    max_val = nums[1]

    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            for k in range(j+1, len(nums)):
                max_val = max(nums[i] * nums[j] * nums[k], max_val)
                
    return max_val
    
print(largest_product_of_three([-10, -20, 20, 1]))
print(largest_product_of_three([-1, -1, 4, 2, 1]))
print(largest_product_of_three([1, 2, 3, 4, 5, 6]))

#80.
import ClearScreen
def first_missing_number(nums):
    if len(nums) == 0:
        return 1
        
    nums.sort()
    smallest_int_num = 0
    
    for i in range(len(nums) - 1):

        if nums[i] <= 0 or nums[i] == nums[i + 1]:
            continue
        else:
            if nums[i + 1] - nums[i] != 1:
                smallest_int_num = nums[i] + 1
                return smallest_int_num    
    if smallest_int_num == 0:
        smallest_int_num = nums[-1] + 1
    return smallest_int_num

print(first_missing_number([2, 3, 7, 6, 8, -1, -10, 15, 16])) 
print(first_missing_number([1, 2, 4, -7, 6, 8, 1, -10, 15]))
print(first_missing_number([1, 2, 3, 4, 5, 6, 7]))
print(first_missing_number([-2, -3, -1, 1, 2, 3]))

#81.
import ClearScreen
import random
print(random.sample([i for i in range(1,100) if i%2==0], 10))

#82.
import ClearScreen
def cal_median(nums):
  nums.sort()
  n = len(nums)
  m = n // 2
  if n % 2 == 0:
    return (nums[m - 1] + nums[m]) / 2
  else:
    return nums[m]
print(cal_median([1,2,3,4,5]))
print(cal_median([1,2,3,4,5,6]))
print(cal_median([6,1,2,4,5,3]))
print(cal_median([1.0,2.11,3.3,4.2,5.22,6.55]))
print(cal_median([1.0,2.11,3.3,4.2,5.22]))
print(cal_median([2.0,12.11,22.3,24.12,55.22]))

#83.
import ClearScreen
def is_symmetrical_num(n):
  return str(n) == str(n)[::-1]
print(is_symmetrical_num(121))
print(is_symmetrical_num(0))
print(is_symmetrical_num(122))
print(is_symmetrical_num(990099))

#84.
import ClearScreen
def count_sum(nums):
   if not nums: return []
   return [len([n for n in nums if n < 0]), sum(n for n in nums if n > 0)]
nums = [1, 2, 3, 4, 5]
print("Original list:",nums)
print("Number of negative of numbers and sum of the positive numbers of the said list:",count_sum(nums))
nums = [-1, -2, -3, -4, -5]
print("Original list:",nums)
print(count_sum(nums))
print("Number of negative of numbers and sum of the positive numbers of the said list:",count_sum(nums))
nums = [1, 2, 3, -4, -5]
print("Original list:",nums)
print(count_sum(nums))
print("Number of negative of numbers and sum of the positive numbers of the said list:",count_sum(nums))
nums = [1, 2, -3, -4, -5]
print("Original list:",nums)
print(count_sum(nums))
print("Number of negative of numbers and sum of the positive numbers of the said list:",count_sum(nums)) 

#85.
import ClearScreen
def check_isogram(str1):
    return len(str1) == len(set(str1.lower()))

print(check_isogram("w3resource"))
print(check_isogram("w3r"))
print(check_isogram("Python"))
print(check_isogram("Java"))

#86.
import ClearScreen
def test_three_equal(x, y, z):
  result= set([x, y, z])
  if len(result)==3:
    return 0
  else:
    return (4 - len(result))

print(test_three_equal(1, 1, 1))
print(test_three_equal(1, 2, 2))
print(test_three_equal(-1, -2, -3))
print(test_three_equal(-1, -1, -1))

#87.
import ClearScreen
def is_valid_emp_code(emp_code):
  return len(emp_code) in [8, 12] and emp_code.isdigit()
print(is_valid_emp_code('12345678'))
print(is_valid_emp_code('1234567j'))
print(is_valid_emp_code('12345678j'))
print(is_valid_emp_code('123456789123'))
print(is_valid_emp_code('123456abcdef'))

#88.
import ClearScreen
def string_letter_check(str1, str2):
  return all([char in str1.lower() for char in str2.lower()])
print(string_letter_check("python", "ypth"))
print(string_letter_check("python", "ypths"))
print(string_letter_check("python", "ypthon"))
print(string_letter_check("123456", "01234"))
print(string_letter_check("123456", "1234"))

#89.
import ClearScreen
def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])
nums = [10, 20, 30, 40, 50, 60, 7]
print("Original list of numbers: ",nums)
print("Sum of the three lowest positive numbers of the said array: ",sum_three_smallest_nums(nums))
nums = [1, 2, 3, 4, 5]
print("\nOriginal list of numbers: ",nums)
print("Sum of the three lowest positive numbers of the said array: ",sum_three_smallest_nums(nums))
nums = [0, 1, 2, 3, 4, 5]
print("\nOriginal list of numbers: ",nums)
print("Sum of the three lowest positive numbers of the said array: ",sum_three_smallest_nums(nums))

#90.
import ClearScreen
def new_string(str1):
 return '*'*(len(str1)-5) + str1[-5:]
text = "kdi39323swe"
print("Original String: ",text)
print("new string: ",new_string(text))
text = "12345abcdef"
print("\nOriginal String: ",text)
print("new string: ",new_string(text))
text = "12345"
print("\nOriginal String: ",text)
print("new string: ",new_string(text))

#91.
import ClearScreen
def num_of_args(*args):
	return(len(args))
print(num_of_args())
print(num_of_args(1))
print(num_of_args(1, 2))
print(num_of_args(1, 2, 3))
print(num_of_args(1, 2, 3, 4))
print(num_of_args([1, 2, 3, 4]))

#92.
import ClearScreen
def nums_cumulative_sum(nums_list):
  return [sum(nums_list[:i+1]) for i in range(len(nums_list))]

print(nums_cumulative_sum([10, 20, 30, 40, 50, 60, 7]))
print(nums_cumulative_sum([1, 2, 3, 4, 5]))
print(nums_cumulative_sum([0, 1, 2, 3, 4, 5]))

#93.
import ClearScreen
def middle_char(txt):
  return txt[(len(txt)-1)//2:(len(txt)+2)//2]
text = "Python"
print("Original string: ",text)
print("Middle character(s) of the said string: ",middle_char(text))
text = "PHP"
print("Original string: ",text)
print("Middle character(s) of the said string: ",middle_char(text))
text = "Java"
print("Original string: ",text)
print("Middle character(s) of the said string: ",middle_char(text))

#94.
import ClearScreen
def adjacent_num_product(list_nums):
   return max(a*b for a, b in zip(list_nums, list_nums[1:]))
nums = [1,2,3,4,5,6]
print("Original list: ",nums)
print("Largest product of the pair of adjacent elements of the said list:", adjacent_num_product(nums))
nums = [1,2,3,4,5]
print("\nOriginal list: ",nums)
print("Largest product of the pair of adjacent elements of the said list:", adjacent_num_product(nums))
nums = [2,3]
print("\nOriginal list: ",nums)
print("Largest product of the pair of adjacent elements of the said list:", adjacent_num_product(nums))

#95.
import ClearScreen
def odd_even_position(nums):
           return all(nums[i]%2==i%2 for i in range(len(nums)))
nums = [2, 1, 4, 3, 6, 7, 6, 3]
print("Original list of numbers:", nums)
print("Check whether every even index contains an even number and every \nodd index contains odd number of a given list:")
print(odd_even_position(nums))
nums = [2, 1, 4, 3, 6, 7, 6, 4]
print("\nOriginal list of numbers:", nums)
print("Check whether every even index contains an even number and every \nodd index contains odd number of a given list:")
print(odd_even_position(nums))
print("\nOriginal list of numbers:", nums)
nums = [4, 1, 2]
print("Check whether every even index contains an even number and every \nodd index contains odd number of a given list:")
print(odd_even_position(nums))

#96.
import ClearScreen
def is_narcissistic_num(num):
	return num == sum([int(x) ** len(str(num)) for x in str(num)])

print(is_narcissistic_num(153))
print(is_narcissistic_num(370))
print(is_narcissistic_num(407))
print(is_narcissistic_num(409))
print(is_narcissistic_num(1634))
print(is_narcissistic_num(8208))
print(is_narcissistic_num(9474))
print(is_narcissistic_num(9475))

#97.
import ClearScreen
def highest_lowest_num(str1):
 num_list = list(map(int, str1.split()))
 return max(num_list), min(num_list)
text = "1 4 5 77 9 0"
print("Original string:", text)
print("Highest and lowest number of the said string:",highest_lowest_num(text))
text = "-1 -4 -5 -77 -9 0"
print("\nOriginal string:", text)
print("Highest and lowest number of the said string:",highest_lowest_num(text))
text = "0 0"
print("\nOriginal string:", text)
print("Highest and lowest number of the said string:",highest_lowest_num(text))


#98.
import ClearScreen
def increasing_trend(nums):
    if (sorted(nums) == nums):
        return True
    else:
        return False

print(increasing_trend([1,2,3,4]))
print(increasing_trend([1,2,5,3,4]))
print(increasing_trend([-1,-2,-3,-4]))
print(increasing_trend([-4,-3,-2,-1]))
print(increasing_trend([1,2,3,4,0]))

#99.
import ClearScreen
def find_string(txt, str1):
	return txt.find(str1, txt.find(str1)+1)

print(find_string("The quick brown fox jumps over the lazy dog", "the"))
print(find_string("the quick brown fox jumps over the lazy dog", "the"))

#100.
import ClearScreen
def sum_index_multiplier(nums):
	return sum(j*i for i, j in enumerate(nums))

print(sum_index_multiplier([1,2,3,4]))
print(sum_index_multiplier([-1,-2,-3,-4]))
print(sum_index_multiplier([]))

#101.
import ClearScreen
def oldest_student(students):
	return max(students, key=students.get)

print(oldest_student({"Bernita Ahner": 12, "Kristie Marsico": 11, 
                      "Sara Pardee": 14, "Fallon Fabiano": 11, 
                      "Nidia Dominique": 15})) 
print(oldest_student({"Nilda Woodside": 12, "Jackelyn Pineda": 12.2, 
                      "Sofia Park": 12.4, "Joannie Archibald": 12.6, 
                      "Becki Saunder": 12.5})) 

#102.
import ClearScreen
def no_consecutive_letters (txt):
    return txt[0] + ''.join(txt[i] for i in range(1,len(txt)) if txt[i] != txt[i-1])

print(no_consecutive_letters("PPYYYTTHON"))
print(no_consecutive_letters("PPyyythonnn"))
print(no_consecutive_letters("Java"))
print(no_consecutive_letters("PPPHHHPPP")) 

#103.
import ClearScreen
def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]
#2x + 3y = 4, 2x + 3y = 8
print(parallel_lines([2,3,4], [2,3,8]))
#2x + 3y = 4, 4x - 3y = 8
print(parallel_lines([2,3,4], [4,-3,8])) 

#104.
import ClearScreen
# Number in a Matrix: Maximum in its column and minimum in its row.
def matrix_number(matrix):
   result = set(map(min, matrix)) & set(map(max, zip(*matrix)))
   return list(result)
m1 = [[1,2], [2,3]]
print("Original matrix:",m1)
print("Number in the said matrix which is maximum in its column and minimum in its row:")
print(matrix_number(m1))
m1 = [[1,2,3], [3,4,5]]
print("\nOriginal matrix:",m1)
print("Number in the said matrix which is maximum in its column and minimum in its row:")
print(matrix_number(m1))
m1 = [[7,5,6], [3,4,4], [6,5,7]]
print("\nOriginal matrix:",m1)
print("Number in the said matrix which is maximum in its column and minimum in its row:")
print(matrix_number(m1))

#105.
import ClearScreen
def Seq_Linear_Quadratic_Cubic(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: return "Linear Sequence"
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: return "Quadratic Sequence"
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: return "Cubic Sequence"

nums = [0,2,4,6,8,10]
print("Original Sequence:",nums)
print("Check the said sequence is Linear, Quadratic or Cubic?")
print(Seq_Linear_Quadratic_Cubic(nums))
nums = [1,4,9,16,25]
print("\nOriginal Sequence:",nums)
print("Check the said sequence is Linear, Quadratic or Cubic?")
print(Seq_Linear_Quadratic_Cubic(nums))
nums = [0,12,10,0,-12,-20]
print("\nOriginal Sequence:",nums)
print("Check the said sequence is Linear, Quadratic or Cubic?")
print(Seq_Linear_Quadratic_Cubic(nums))
nums = [1,2,3,4,5]
print("\nOriginal Sequence:",nums)
print("Check the said sequence is Linear, Quadratic or Cubic?")
print(Seq_Linear_Quadratic_Cubic(nums))

#106.
import ClearScreen
def is_pandigital_num(n):
    return len(set(str(n))) == 10

n = 1023456897
print("Original number:",n)
print("Check the said number is Pandigital number or not?")
print(is_pandigital_num(n))
n = 1023456798
print("Original number:",n)
print("Check the said number is Pandigital number or not?")
print(is_pandigital_num(n))
n = 1023457689
print("Original number:",n)
print("Check the said number is Pandigital number or not?")
print(is_pandigital_num(n))
n = 1023456789
print("Original number:",n)
print("Check the said number is Pandigital number or not?")
print(is_pandigital_num(n))
n = 102345679
print("Original number:",n)
print("Check the said number is Pandigital number or not?")
print(is_pandigital_num(n))

#107.
import ClearScreen
def oddish_evenish_num(n):
	return 'Oddish' if sum(map(int, str(n))) % 2 else 'Evenish'
n = 120
print("Original Number",n)
print("Check whether the sum of all digits of the said number is odd or even!")
print(oddish_evenish_num(120))
n = 321
print("Original Number",n)
print("Check whether the sum of all digits of the said number is odd or even!")
print(oddish_evenish_num(321))
n = 43 
print("Original Number",n)
print("Check whether the sum of all digits of the said number is odd or even!")
print(oddish_evenish_num(43))
n = 4433
print("Original Number",n)
print("Check whether the sum of all digits of the said number is odd or even!")
print(oddish_evenish_num(4433))
n = 373
print("Original Number",n)
print("Check whether the sum of all digits of the said number is odd or even!")
print(oddish_evenish_num(373))

#108.
import ClearScreen
def check_last_digit(x, y, z):
  return str(x+z)[-1] == str(y)[-1]
print(check_last_digit(12, 26, 44))
print(check_last_digit(145, 122, 1010))
print(check_last_digit(0, 20, 40))
print(check_last_digit(1, 22, 40))
print(check_last_digit(145, 129, 104))

#109.
import ClearScreen
def indices_in_list(nums_list, n):
           return [idx for idx, i in enumerate(nums_list) if i == n]
nums = [1,2,3,4,5,2]
print("Original list of numbers:",nums)
n = 2
print("Given Number",n)
print("Indices of all occurrences of the said item in the given list:")
print(indices_in_list(nums, n))
nums = [3,1,2,3,4,5,6,3,3]
print("\nOriginal list of numbers:",nums)
n = 3
print("Given Number",n)
print("Indices of all occurrences of the said item in the given list:")
print(indices_in_list(nums, n))
nums = [1,2,3,-4,5,2,-4]
print("\nOriginal list of numbers:",nums)
n = -4
print("Given Number",n)
print("Indices of all occurrences of the said item in the given list:")
print(indices_in_list(nums, n))
nums = [1,2,3,4,5,2]
print("\nOriginal list of numbers:",nums)
n = 7
print("Given Number",n)
print("Indices of all occurrences of the said item in the given list:")
print(indices_in_list(nums, n))

#110.
import ClearScreen
def unique_nums(nums):
 return [i for i in nums if nums.count(i)==1]
nums = [1,2,3,2,3,4,5]
print("Original list of numbers:",nums)
print("After removing the duplicate numbers from the said list:")
print(unique_nums(nums))
nums = [1,2,3,2,4,5]
print("\nOriginal list of numbers:",nums)
print("After removing the duplicate numbers from the said list:")
print(unique_nums(nums))
nums = [1,2,3,4,5]
print("\nOriginal list of numbers:",nums)
print("After removing the duplicate numbers from the said list:")
print(unique_nums(nums))

#111.
import ClearScreen
def is_circle_collision(circle1, circle2):
   x1, y1, r1 = circle1
   x2, y2, r2 = circle2
   distance = ((x1-x2)**2 + (y1-y2)**2)**0.5
   return distance <= r1 + r2
print(is_circle_collision([1,2, 4], [1,2, 8]))
print(is_circle_collision([0,0, 2], [10,10, 5]))

#112.
import ClearScreen
def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))
print(digit_distance_nums(123, 256))
print(digit_distance_nums(23, 56))
print(digit_distance_nums(1, 2))
print(digit_distance_nums(24232, 45645))

#113.
import ClearScreen
def reverse_even(txt):
         return ' '.join(i[::-1] if not len(i)%2 else i for i in txt.split())
print(reverse_even("The quick brown fox jumps over the lazy dog"))
print(reverse_even("Python Exercises"))

#114.
import ClearScreen
import string
print("Alphabet from a-z:")
for letter in string.ascii_lowercase:
   print(letter, end =" ")
print("\nAlphabet from A-Z:")
for letter in string.ascii_uppercase:
   print(letter, end =" ")

#115.
import ClearScreen
nums = range(1,10)
print(list(nums))
print(list(map(str, nums)))

#116.
from operator import truediv
from pickle import FALSE
import ClearScreen
import math
def is_not_prime(n):
    ans = False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            ans = True
    return ans
print("Nonprime numbers between 1 to 100:")
for x in filter(is_not_prime, range(1, 101)):
    print(x)

#117.
import ClearScreen
import requests
url = 'http://www.example.com/'
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh) Gecko/20100101 Firefox/38.0'}
request = requests.get(url, headers=headers)
print("Web page status: ", request)
print("\nHTML code of the above web page:")
if request.ok:
    print(request.text)

#118.
import ClearScreen
from multiprocessing import Process
import os
def info(title):
    print(title)
    print('module name:', __name__)
    print('parent process:', os.getppid())
    print('process id:', os.getpid())
def f(name):
    info('function f')
    print('hello', name)
if __name__ == '__main__':
    info('Main line')
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()

#119.
import ClearScreen
def gcd(p,q):
# Create the gcd of two positive integers.
    while q != 0:
        p, q = q, p%q
    return p
def is_coprime(x, y):
    return gcd(x, y) == 1
print(is_coprime(17, 13))
print(is_coprime(17, 21))
print(is_coprime(15, 21))
print(is_coprime(25, 45))

#120.
import ClearScreen
def gcd(p,q):
# Create the gcd of two positive integers.
    while q != 0:
        p, q = q, p%q
    return p

def is_coprime(x, y):
    return gcd(x, y) == 1

def phi_func(x):
    if x == 1:
        return 1
    else:
        n = [y for y in range(1,x) if is_coprime(x,y)]
        return len(n)
print(phi_func(10))
print(phi_func(15))
print(phi_func(33))

#121.
import ClearScreen
def test(str):
	return str.translate(str.maketrans('PTSHA', '90168'))
str = "PHP"
print("Original string: ",str)
print("Coded string: ",test(str))
str = "JAVASCRIPT"
print("\nOriginal string: ",str)
print("Coded string: ",test(str))

#122.
import ClearScreen
def test(str):
    return str.islower() or str.isupper()

str = "PHP"
print("Original string: ",str)
print("Coded string: ",test(str))
str = "javascript"
print("\nOriginal string: ",str)
print("Coded string: ",test(str))
str = "JavaScript"
print("\nOriginal string: ",str)
print("Coded string: ",test(str))

#123.
import ClearScreen
def test(str):
    return str if len(str) < 3 else str[1:-1]
str = "PHP"
print("Original string: ",str)
print("Removing the first and last elements from the said string: ",test(str))
str = "Python"
print("\nOriginal string: ",str)
print("Removing the first and last elements from the said string: ",test(str))
str = "JavaScript"
print("\nOriginal string: ",str)
print("Removing the first and last elements from the said string: ",test(str))

#124.
import ClearScreen
def test(str1):
    return any(c1 == c2 for c1, c2 in zip(str1, str1[1:]))
str = "PHP"
print("Original string: ",str)
print("Check for consecutive similar letters! ",test(str))
str = "PHHP"
print("\nOriginal string: ",str)
print("Check for consecutive similar letters! ",test(str))
str = "PHPP"
print("\nOriginal string: ",str)
print("Check for consecutive similar letters! ",test(str))

#125.
import ClearScreen
def test(str1):
    return str1[::-1].lower()
str = "PHP"
print("Original string:",str)
print("Reverse the said string in lower case:",test(str))
str = "JavaScript"
print("\nOriginal string:",str)
print("Reverse the said string in lower case:",test(str))
str = "PHPP"
print("\nOriginal string:",str)
print("Reverse the said string in lower case:",test(str)) 

#test
import ClearScreen
name = input ("Wat is jouw naam? ")
def reverse(Name):
    return Name[::-1].lower()
print("Originele naam:",name)
print("Uw naam achterwaarts is:",reverse(name))

#126.
def test(str1):
    return ''.join(sorted(str1))

str1 = "PHP"
print("Original string:",str1)
print("Convert the letters of the said string into alphabetical order:",test(str1))
str1 = "javascript"
print("\nOriginal string:",str1)
print("Convert the letters of the said string into alphabetical order:",test(str1))
str1 = "python"
print("\nOriginal string:",str1)
print("Convert the letters of the said string into alphabetical order:",test(str1)) 

#127.
import ClearScreen
import array as arr
def test(nums):
    return sum(nums) % len(nums) == 0
array_num = arr.array('i', [1, 3, 5, 7, 9])
print("Original array:")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print("\nCheck the average value of the elements of the said array is a whole number or not:\n",test(array_num))
array_num = arr.array('i', [2, 4, 2, 6, 4, 8])
print("\nOriginal array:")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print("\nCheck the average value of the elements of the said array is a whole number or not:\n",test(array_num)) 

#128.
import ClearScreen
import re
def test(text):
    return re.sub(r'[aeiouÃ©Ã¨]+', '', text, flags=re.IGNORECASE)
text = "Jurgen";
print("Original string:",text)
print("After removing all the vowels from the said string: " + test(text))
text = "AurÃ©lie"
print("\nOriginal string:",text)
print("After removing all the vowels from the said string: " + test(text))
text = "Tibe"
print("\nOriginal string:",text)
print("After removing all the vowels from the said string: " + test(text))
text = "Liene"
print("\nOriginal string:",text)
print("After removing all the vowels from the said string: " + test(text))

#129.
import ClearScreen
def test(text):
   return [x for x in range(len(text)) if text[x].islower()]
text = "Python";
print("Original string:",text)
print("Indices of all lower case letters of the said string:\n",test(text))
text = "JavaScript";
print("Original string:",text)
print("Indices of all lower case letters of the said string:\n",test(text))
text = "PHP";
print("Original string:",text)
print("Indices of all lower case letters of the said string:\n",test(text))

#130.
import ClearScreen
from datetime import date
def test(month, year): 
    return str(date(year,month,13).strftime("%A")=='Saturday')

month = 11;
year = 2022;            
print("Month No.: ", month, " Year: ", year);
print("Check whether the said month and year contains a Saturday 13th.: " + test(month, year));
month = 6;
year = 2022;            
print("\nMonth No.: ", month, " Year: ", year);
print("Check whether the said month and year contains a Saturday 13th.: " + test(month, year)); 
month = 2;
year = 1982;            
print("\nMonth No.: ", month, " Year: ", year);
print("Check whether the said month and year contains a Saturday 13th.: " + test(month, year)); 

#131.
import ClearScreen
def test(num):
    ones =  bin(num). replace("0b", "").count('1')
    zeros = bin(num). replace("0b", "").count('0')
    return "Number of zeros: " + str(zeros) + ", Number of ones: " + str(ones);

n = 12; 
print("Original number: ",n);
print("Number of ones and zeros in the binary representation of the said number:");
print(test(n));
n = 1234;
print("\nOriginal number: ",n);
print("Number of ones and zeros in the binary representation of the said number:");
print(test(n));

#132.
import ClearScreen
#Source https://bit.ly/3w492zp

from functools import reduce

def test(n):    
    return set(reduce(list.__add__, 
                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))

'''
sqrt(x) * sqrt(x) = x. So if the two factors are the same, they're both 
the square root. If you make one factor bigger, you have to make the other 
factor smaller. This means that one of the two will always be less than or 
equal to sqrt(x), so you only have to search up to that point to find one 
of the two matching factors. You can then use x / fac1 to get fac2.

The reduce(list.__add__, ...) is taking the little lists of [fac1, fac2] 
and joining them together in one long list.

The [i, n/i] for i in range(1, int(sqrt(n)) + 1) if n % i == 0 returns 
a pair of factors if the remainder when you divide n by the smaller one 
is zero (it doesn't need to check the larger one too; it just gets that 
by dividing n by the smaller one.)

The set(...) on the outside is getting rid of duplicates, which only 
happens for perfect squares. For n = 4, this will return 2 twice, so 
set gets rid of one of them.
'''
n = 1
print("\nOriginal Number:",n)
print("Factors of the said number:",test(n))
n = 12
print("\nOriginal Number:",n)
print("Factors of the said number:",test(n))
n = 100
print("\nOriginal Number:",n)
print("Factors of the said number:",test(n))

#133.
import ClearScreen
def test(lst):
  pos_sum = 0
  neg_sum = 0
  for n in lst:
    if n > 0:
      pos_sum += n
    elif n < 0:
      neg_sum += n
  return max(pos_sum, neg_sum, key=abs)

nums = { 0, -10, -11, -12, -13, -14, 15, 16, 17, 18, 19, 20 };
print("Original array elements:");
print(nums)
print("Largest sum - Positive/Negative numbers of the said array: ", test(nums));
nums = { -11, -22, -44, 0, 3, 4 , 5, 9 };
print("\nOriginal array elements:");
print(nums)
print("Largest sum - Positive/Negative numbers of the said array: ", test(nums));

#134.
import ClearScreen
def test(txt):
    result_str = ""
    s = True
    for i in txt:
        result_str += i.upper() if s else i.lower()
        if i.isalpha():
            s = not s
    return result_str
str1 = "Python Exercises";
print("Original string: ", str1);
print("After alternating the case of each letter of the said string:")
print(test(str1))
str1 = "C# is used to develop web apps, desktop apps, mobile apps, games and much more.";
print("\nOriginal string: ", str1);
print("After alternating the case of each letter of the said string:")
print(test(str1))  

#135.
import ClearScreen
from functools import reduce
def test(nums):
    return reduce(lambda x,y:lcm(x,y),nums)
def gcd(a, b):
    while b:
        a, b = b, a%b
    return a
def lcm(a, b):
    return a*b // gcd(a, b)
nums = [ 4, 6, 8 ]
print("Original list elements:")
print(nums)
print("LCM of the numbers of the said array of positive integers: ", test(nums))
nums = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
print("\nOriginal list elements:")
print(nums)
print("LCM of the numbers of the said array of positive integers: ", test(nums))
nums = [ 48, 72, 108  ]
print("\nOriginal list elements:")
print(nums)
print("LCM of the numbers of the said array of positive integers: ", test(nums))

#136.
import ClearScreen
def test(txt):
	return ' '.join(i[::-1] if len(i)%2 else i for i in txt.split())
 
text = "The quick brown fox jumps over the lazy dog"
print("Original string:")
print(text)
print("Reverse all the words of the said string which have odd length:")
print(test(text))
text = "Python Exercises"
print("\nOriginal string:")
print(text)
print("Reverse all the words of the said string which have odd length:")
print(test(text))

#137.
import ClearScreen
def test(str1, str2):
    for i in range(len(str2)):
        while str2[i:] in str1 and str2[-1]==str1[-1]:
            return str2[i:]
    return ""

str1 = "running";
str2 = "ruminating";
print("Original strings: " + str1 + "  " + str2);
print("Common ending between said two strings: " + test(str1, str2));
str1 = "thisisatest";
str2 = "testing123testing";
print("\nOriginal strings: " + str1 + "  " + str2);
print("Common ending between said two strings: " + test(str1, str2));

#138.
import ClearScreen
def test(n):
    return int(bin(n)[::-1][:-2], 2)

n = 13
print("Original number: ", n);
print("Reverse the binary representation of the said integer and convert it into an integer:\n",test(n));
n = 145
print("Original number: ", n);
print("Reverse the binary representation of the said integer and convert it into an integer:\n",test(n));
n = 1342
print("Original number: ", n);
print("Reverse the binary representation of the said integer and convert it into an integer:\n",test(n));

#139.
import ClearScreen
def test(n):
    x = n
    y = n
    while True:
        if str(x) == str(x)[::-1]:
            return x
        x -=  1
        if str(y) == str(y)[::-1]:
            return y
        y += 1
    return int(bin(n)[::-1][:-2], 2)

n = 120;
print("Original number: ", n);
print("Closest Palindrome number of the said number: ",test(n));
n = 321;
print("Original number: ", n);
print("Closest Palindrome number of the said number: ",test(n));
n = 43;
print("Original number: ", n);
print("Closest Palindrome number of the said number: ",test(n));
n = 1234;
print("Original number: ", n);
print("Closest Palindrome number of the said number: ",test(n));

#140.
import ClearScreen
nums = ['0.49', '0.54', '0.54', '0.54', '0.54', '0.54', '0.55', '0.54', '0.54',  '0.54', 
 '0.55', '0.55', '0.55', '0.54', '0.55', '0.55', '0.54', '0.55', '0.55', '0.54']
print("Original list:")
print(nums)
print("\nList of Floats:")
nums_of_floats = []
for item in nums:
    nums_of_floats.append(float(item))
print(nums_of_floats)

#141.
import ClearScreen
def get_domain_name(ip_address):
  import socket
  result=socket.gethostbyaddr(ip_address)
  return list(result)[0]
print("Domain name using PTR DNS:")
print(get_domain_name("8.8.8.8"))
print(get_domain_name("13.251.106.90"))
print(get_domain_name("8.8.4.4"))
print(get_domain_name("23.23.212.126"))

#142.
import ClearScreen
def test(str1):
    while '01' in str1:
        str1 = str1.replace('01', '')
    return len(str1) == 0

str1 = "01010101"
print("Original sequence:",str1)
print("Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:")
print(test(str1))
str1 = "00"
print("\nOriginal sequence:",str1)
print("Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:")
print(test(str1))
str1 = "000111000111"
print("\nOriginal sequence:",str1)
print("Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:")
print(test(str1))
str1 = "00011100011"
print("\nOriginal sequence:",str1)
print("Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:")
print(test(str1))

#143.
import ClearScreen
print("Smiling face with heart-eyes:")
print("\U0001F60D")
print("Unamused face:")
print("\U0001F612")
print("Beaming face with smiling eyes:")
print("\U0001F601")
print("Grinning face with sweat:")
print("\U0001F605")
print("Face with tears of joy:")
print("\U0001F602")
print("Slightly smiling face:")
print("\U0001F642")
print("Smiling face with halo:")
print("\U0001F607")
print("Zipper-mouth face:")
print("\U0001F910")
print("Grinning face:")
print("\U0001F600")
print("Rolling on the floor laughing:")
print("\U0001F923")

#144.
import ClearScreen
language = "Python"
version = 3.6
print('Language: ' + language + ',' + ' Version: ' + str(version))
"""

#145.
import ClearScreen
def Largest_Smallest_digit(n):
   largest_digit = 0
   smallest_digit = 9
   while (n):
       digit = n % 10
       # largest digit
       largest_digit = max(digit, largest_digit)
       # smallest digit
       smallest_digit = min(digit, smallest_digit)
       n = n // 10
   return largest_digit, smallest_digit
n = 9387422
print("Original Number:", n)
result = Largest_Smallest_digit(n)
print("Largest Digit of the said number:", result[0])
print("Smallest Digit of the said number:", result[1])
n = 500
print("\nOriginal Number:", n)
result = Largest_Smallest_digit(n)
print("Largest Digit of the said number:", result[0])
print("Smallest Digit of the said number:", result[1])
n = 231548
print("\nOriginal Number:", n)
result = Largest_Smallest_digit(n)
print("Largest Digit of the said number:", result[0])
print("Smallest Digit of the said number:", result[1])